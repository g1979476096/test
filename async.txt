async 函数是什么？一句话，它就是 Generator 函数的语法糖。  

const fs = require('fs');

const readFile = function (fileName) {
  return new Promise(function (resolve, reject) {
    fs.readFile(fileName, function(error, data) {
      if (error) return reject(error);
      resolve(data);
    });
  });
};

const gen = function* () {
  const f1 = yield readFile('/etc/fstab');
  const f2 = yield readFile('/etc/shells');
  console.log(f1.toString());
  console.log(f2.toString());
};

const asyncReadFile = async function () {
  const f1 = await readFile('/etc/fstab');
  const f2 = await readFile('/etc/shells');           //async表示函数里有异步操作，await表示紧跟在后面的表达式需要等待结果。
  console.log(f1.toString());                         //async函数的返回值是 Promise 对象
  console.log(f2.toString());
};


async函数返回一个 Promise 对象，可以使用then方法添加回调函数。当函数执行的时候，一旦遇到await就会先返回，等到异步操作完成，再接着执行函数体内后面的语句。
async函数返回的是 Promise 对象，



async function test(){
  console.log(11)
};
test()
//11
//Promise { <state>: "fulfilled", <value>: undefined }
​//  <state>: "fulfilled"
//​  <value>: undefined