同步任务先执行，微任务再执行（promise.then()...）再宏任务，再次循环。

function timeout(ms) {
  return new Promise((resolve, reject) => {
    setTimeout(resolve, ms, 'done');
  });
}

timeout(100).then((value) => {
  console.log(value);
});

//
function timeout(ms) {
  return new Promise((resolve, reject) => {
    setTimeout(resolve, ms, 'done');setTimeout(function(){console.log('zhixing')},1000);alert(2)
  });
}

timeout(2000).then((value) => { alert(1)
  console.log(value); alert(3)
});
//2,zhixing,1,done,3



then是要等到promise状态变为resolved下才会调用，可以使用延时函数来进行操作


对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。
Promise对象的状态改变，只有两种可能：从pending变为fulfilled和从pending变为rejected。

Promise.all()
const p = Promise.all([p1, p2, p3]);   Promise.all()方法接受一个数组作为参数
1）只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。
2）只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数。

Promise.race()
const p = Promise.race([p1, p2, p3]);
只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给p的回调函数。