代码/工作区 -- git add 文件  --> 暂存区  -- git commit --> 本地仓库  -- git push --> 远程仓库



分支
 创建分支 主分支master 次分支 develop
  创建次分支 git checkout -b develop master          //后面是跟一个master说明，创建的develop分支是基于当前的master， 如果当前就在master分支，则可以不写。 如果当前分支HEAD指向的是别的分支，又想基于master分支创建，就必须写master
  切换分支 git checkout master 
  将develop分支合并到master主分支   git merge --on--ff  develop

 其他临时性分支 feature功能分支 、release预发布分支  fixbug修补bug分支
    
    创建分支 git checkout -b xxx 相对主分支      切换分支 git checkout 要切换的分支          合并分支 git merge --on-ff 要合并的分支  (先切换到要合并的主分支上，在进行合并)      删除分支 git branch -d  要删除的分支


git 命令
 git init 
 git clone 地址
 git config --list

 git add 文件名 .  
 git rm [file1] [file2] ...    删除工作区文件，并且将这次删除放入暂存区

 git commit -m 'message'     从暂存区提交到本地仓库
 git commit [file1] [file2]  -m  'message' 提交指定文件到本地仓库




 
 git branch     列出所有本地分支
 git branch -r  列出所有远程分支
 git branch -a  列出所有本地分支和远程分支
 git branch 分支名  新建一个分支
 git checkout -b 分支名  新建一个分支并切换到该分支
 git checkout 分支名   切换到指定分支并更新工作区
 git checkout -  切换到上个分支
 git merge --on--ff  develop   合并develop 分支到当前所在分支
 git branch -d 分支名   删除分支
    # 删除远程分支
    $ git push origin --delete [branch-name]
    $ git branch -dr [remote/branch]


 git status  显示有变更的文件
 git diff 显示暂存区和工作区的差异
 git blame 文件名   显示指定文件是什么人在什么时候修改过的


 git remote -v    显示所有远程仓库
 git remote add 地址命名(origin) [url]
 git remote rm  地址名(origin)/url
 git remote rename oldName newName  修改仓库名

 # 上传本地指定分支到远程仓库
 $ git push [remote] [branch]
 # 强行推送当前分支到远程仓库，即使有冲突
 $ git push [remote] --force

 $ git push -u origin master    如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用git push    
 上面命令将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了。不带任何参数的git push，默认只推送当前分支，这叫做simple方式。
 

 git pull命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并。它的完整格式稍稍有点复杂。
 $ git pull <远程主机名> <远程分支名>:<本地分支名>  
 比如，取回origin主机的next分支，与本地的master分支合并，需要写成下面这样。
 $ git pull origin next:master

